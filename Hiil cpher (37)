#include <stdio.h>
#include <stdlib.h>

#define N 2 // Size of the matrix (2x2 in this example)

// Function to calculate the modulo inverse of a number
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++)
        if ((a * x) % m == 1)
            return x;
    return -1;
}

// Function to calculate the determinant of a 2x2 matrix
int determinant(int key[][N]) {
    return (key[0][0] * key[1][1] - key[0][1] * key[1][0]);
}

// Function to calculate the adjugate of a 2x2 matrix
void adjugate(int key[][N], int adj[][N]) {
    adj[0][0] = key[1][1];
    adj[0][1] = -key[0][1];
    adj[1][0] = -key[1][0];
    adj[1][1] = key[0][0];
}

// Function to calculate the inverse of a key matrix
void inverse(int key[][N], int inverse_key[][N]) {
    int det = determinant(key);
    int inv_det = modInverse(det, 26);
    
    int adj[N][N];
    adjugate(key, adj);
    
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            inverse_key[i][j] = (adj[i][j] * inv_det) % 26;
            if (inverse_key[i][j] < 0)
                inverse_key[i][j] += 26;
        }
    }
}

// Function to multiply key matrix with plaintext
void multiply(int key[][N], int plaintext[], int result[]) {
    for (int i = 0; i < N; i++) {
        result[i] = 0;
        for (int j = 0; j < N; j++) {
            result[i] += key[i][j] * plaintext[j];
        }
        result[i] %= 26;
    }
}

int main() {
    int key[N][N] = {{6, 24}, {1, 13}}; // Example key matrix
    int plaintext[N] = {0}; // Initialize plaintext
    int ciphertext[N] = {0}; // Initialize ciphertext
    int decrypted[N] = {0}; // Initialize decrypted text

    printf("Enter plaintext (2 numbers): ");
    for (int i = 0; i < N; i++) {
        scanf("%d", &plaintext[i]);
    }

    // Encrypt
    multiply(key, plaintext, ciphertext);

    printf("Ciphertext: ");
    for (int i = 0; i < N; i++) {
        printf("%c", ciphertext[i] + 'A'); // Convert to character
    }
    printf("\n");

    // Decrypt using known plaintext attack
    int known_plaintext[N] = {1, 2}; // Known plaintext
    int known_ciphertext[N] = {21, 18}; // Corresponding ciphertext

    int inverse_key[N][N];
    inverse(key, inverse_key);

    multiply(inverse_key, known_ciphertext, decrypted);

    printf("Decrypted: ");
    for (int i = 0; i < N; i++) {
        printf("%c", decrypted[i] + 'A'); // Convert to character
    }
    printf("\n");

    return 0;
}
